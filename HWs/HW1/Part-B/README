In this part, we implemented the anagram sorted with two stages of Mapreduce. In first stage we read the input file line-by-line, and consider each line as an entry. In the mapper of first stage we sort the characters in each word and use this generated string as the output key of the mapper stage. So the mapper of first stage generates (sorted word,word) tuples. In the reducer of first stage we get these tuples from mapper and concatenate the words as the aggregation step to generate the intermediate data. So our intermediate data is of form (sorted word, list of words).
In the second stage of Map-reduce, we these intermediate values and sort them in descending order based on size of each list of words. So the mapper in this stage gets each (sorted word, list of words) tuple from intermediate data, calculates the length of list and creates tuples of form (size of list, list of words). Here we use the built-in sorter of hadoop MR to handle sorting our data before aggregation. Finally in the reducer of this stage we get rid of the intermediate key and just send the list of words to the output file. Diagram below overviews steps of our Anagram sorter.

